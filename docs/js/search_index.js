var search_data = {"index":{"searchIndex":["silicium","error","geometry","line2dcanon","graphs","grapherror","orientedgraph","unorientedgraph","integraldoesntexisterror","numericalintegration","optimization","plotter","image","add_edge!()","add_edge!()","add_edge_force!()","add_vertex!()","adjacted_with()","bar_chart()","clockwise()","color()","counter_clockwise()","delete_edge!()","delete_edge!()","delete_vertex!()","dijkstra_algorythm()","directing_vector3d()","distance_point_line2d()","distance_point_to_line3d()","distance_point_to_point2d()","distance_point_to_point3d()","edge_label_number()","edge_number()","edge_number()","export()","get_edge_label()","get_vertex_label()","has_edge?()","has_vertex?()","label_edge!()","label_edge!()","label_vertex!()","left_rect_integration()","left_rect_integration_n()","middle_rectangles()","middle_rectangles_with_a_segment()","minimal_convex_hull_2d()","new()","new()","new()","oriented_area()","point_is_on_line?()","point_on_the_line3d()","re_lu()","rectangle()","simpson_integration()","simpson_integration_with_a_segment()","three_eights_integration()","three_eights_integration_n()","trapezoid()","trapezoid_with_a_segment()","vertex_label_number()","vertex_number()","readme"],"longSearchIndex":["silicium","silicium::error","silicium::geometry","silicium::geometry::line2dcanon","silicium::graphs","silicium::graphs::grapherror","silicium::graphs::orientedgraph","silicium::graphs::unorientedgraph","silicium::integraldoesntexisterror","silicium::numericalintegration","silicium::optimization","silicium::plotter","silicium::plotter::image","silicium::graphs::orientedgraph#add_edge!()","silicium::graphs::unorientedgraph#add_edge!()","silicium::graphs::orientedgraph#add_edge_force!()","silicium::graphs::orientedgraph#add_vertex!()","silicium::graphs::orientedgraph#adjacted_with()","silicium::plotter::image#bar_chart()","silicium::geometry#clockwise()","silicium::plotter#color()","silicium::geometry#counter_clockwise()","silicium::graphs::orientedgraph#delete_edge!()","silicium::graphs::unorientedgraph#delete_edge!()","silicium::graphs::orientedgraph#delete_vertex!()","silicium::graphs#dijkstra_algorythm()","silicium::geometry#directing_vector3d()","silicium::geometry#distance_point_line2d()","silicium::geometry#distance_point_to_line3d()","silicium::geometry#distance_point_to_point2d()","silicium::geometry#distance_point_to_point3d()","silicium::graphs::orientedgraph#edge_label_number()","silicium::graphs::orientedgraph#edge_number()","silicium::graphs::unorientedgraph#edge_number()","silicium::plotter::image#export()","silicium::graphs::orientedgraph#get_edge_label()","silicium::graphs::orientedgraph#get_vertex_label()","silicium::graphs::orientedgraph#has_edge?()","silicium::graphs::orientedgraph#has_vertex?()","silicium::graphs::orientedgraph#label_edge!()","silicium::graphs::unorientedgraph#label_edge!()","silicium::graphs::orientedgraph#label_vertex!()","silicium::numericalintegration::left_rect_integration()","silicium::numericalintegration::left_rect_integration_n()","silicium::numericalintegration::middle_rectangles()","silicium::numericalintegration::middle_rectangles_with_a_segment()","silicium::geometry#minimal_convex_hull_2d()","silicium::geometry::line2dcanon::new()","silicium::graphs::orientedgraph::new()","silicium::plotter::image::new()","silicium::geometry#oriented_area()","silicium::geometry::line2dcanon#point_is_on_line?()","silicium::geometry#point_on_the_line3d()","silicium::optimization#re_lu()","silicium::plotter::image#rectangle()","silicium::numericalintegration::simpson_integration()","silicium::numericalintegration::simpson_integration_with_a_segment()","silicium::numericalintegration::three_eights_integration()","silicium::numericalintegration::three_eights_integration_n()","silicium::numericalintegration::trapezoid()","silicium::numericalintegration::trapezoid_with_a_segment()","silicium::graphs::orientedgraph#vertex_label_number()","silicium::graphs::orientedgraph#vertex_number()",""],"info":[["Silicium","","Silicium.html","","<p>require &#39;set&#39; require &#39;silicium&#39;\n"],["Silicium::Error","","Silicium/Error.html","",""],["Silicium::Geometry","","Silicium/Geometry.html","",""],["Silicium::Geometry::Line2dCanon","","Silicium/Geometry/Line2dCanon.html","","<p>Class represents a line as equation y = k*x +b k - slope b - free_term in two-dimensional space\n"],["Silicium::Graphs","","Silicium/Graphs.html","",""],["Silicium::Graphs::GraphError","","Silicium/Graphs/GraphError.html","",""],["Silicium::Graphs::OrientedGraph","","Silicium/Graphs/OrientedGraph.html","",""],["Silicium::Graphs::UnorientedGraph","","Silicium/Graphs/UnorientedGraph.html","",""],["Silicium::IntegralDoesntExistError","","Silicium/IntegralDoesntExistError.html","",""],["Silicium::NumericalIntegration","","Silicium/NumericalIntegration.html","","<p>A class providing numerical integration methods\n"],["Silicium::Optimization","","Silicium/Optimization.html","",""],["Silicium::Plotter","","Silicium/Plotter.html","",""],["Silicium::Plotter::Image","","Silicium/Plotter/Image.html","","<p>A class representing canvas for plotting bar charts and function graphs\n"],["add_edge!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-add_edge-21","(from, to)",""],["add_edge!","Silicium::Graphs::UnorientedGraph","Silicium/Graphs/UnorientedGraph.html#method-i-add_edge-21","(from, to)",""],["add_edge_force!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-add_edge_force-21","(from, to)","<p>should only be used in constructor\n"],["add_vertex!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-add_vertex-21","(vertex_id)",""],["adjacted_with","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-adjacted_with","(vertex)",""],["bar_chart","Silicium::Plotter::Image","Silicium/Plotter/Image.html#method-i-bar_chart","(bars, bar_width, bars_color = ChunkyPNG::Color('red @ 1.0'), axis_color = ChunkyPNG::Color::BLACK)","<p>Draws a bar chart in the plot using provided <code>bars</code>, each of them has width of <code>bar_width</code> and colored <code>bars_color</code> …\n"],["clockwise","Silicium::Geometry","Silicium/Geometry.html#method-i-clockwise","(a, b, c)","<p>Determines if a clockwise crawl is performed for defined order of points\n"],["color","Silicium::Plotter","Silicium/Plotter.html#method-i-color","(*args)","<p>Factory method to return a color value, based on the arguments given.\n<p>@overload Color(r, g, b, a)\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@param</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["counter_clockwise","Silicium::Geometry","Silicium/Geometry.html#method-i-counter_clockwise","(a, b, c)","<p>Determines if a counter-clockwise crawl is performed for defined order of points\n"],["delete_edge!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-delete_edge-21","(from, to)",""],["delete_edge!","Silicium::Graphs::UnorientedGraph","Silicium/Graphs/UnorientedGraph.html#method-i-delete_edge-21","(from, to)",""],["delete_vertex!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-delete_vertex-21","(vertex)",""],["dijkstra_algorythm","Silicium::Graphs","Silicium/Graphs.html#method-i-dijkstra_algorythm","(graph, starting_vertex)",""],["directing_vector3d","Silicium::Geometry","Silicium/Geometry.html#method-i-directing_vector3d","(c)","\n<pre>Creates an array- directing vector in three-dimensional space .\nThe equation is specified in the canonical ...</pre>\n"],["distance_point_line2d","Silicium::Geometry","Silicium/Geometry.html#method-i-distance_point_line2d","(p1, p2, a)","<p>The distance from a point to a line on a plane The line is defined by two points en.wikipedia.org/wiki/Distance_from_a_point_to_a_line …\n"],["distance_point_to_line3d","Silicium::Geometry","Silicium/Geometry.html#method-i-distance_point_to_line3d","(a,c)","\n<pre class=\"ruby\"><span class=\"ruby-constant\">Calculates</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">distance</span> <span class=\"ruby-identifier\">from</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">point</span> <span class=\"ruby-identifier\">given</span> <span class=\"ruby-identifier\">by</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-constant\">Point3d</span> <span class=\"ruby-identifier\">structure</span>\n<span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">straight</span> <span class=\"ruby-identifier\">line</span> <span class=\"ruby-identifier\">given</span> <span class=\"ruby-identifier\">by</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">canonical</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["distance_point_to_point2d","Silicium::Geometry","Silicium/Geometry.html#method-i-distance_point_to_point2d","(a,b)","<p>Calculates the distance from given points in two-dimensional space\n"],["distance_point_to_point3d","Silicium::Geometry","Silicium/Geometry.html#method-i-distance_point_to_point3d","(a,b)","<p>Calculates the distance from given points in three-dimensional space\n"],["edge_label_number","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-edge_label_number","()",""],["edge_number","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-edge_number","()",""],["edge_number","Silicium::Graphs::UnorientedGraph","Silicium/Graphs/UnorientedGraph.html#method-i-edge_number","()",""],["export","Silicium::Plotter::Image","Silicium/Plotter/Image.html#method-i-export","(filename)","<p>Exports plotted image to file <code>filename</code>\n"],["get_edge_label","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-get_edge_label","(from, to)",""],["get_vertex_label","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-get_vertex_label","(vertex)",""],["has_edge?","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-has_edge-3F","(from, to)",""],["has_vertex?","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-has_vertex-3F","(vertex)",""],["label_edge!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-label_edge-21","(from, to, label)",""],["label_edge!","Silicium::Graphs::UnorientedGraph","Silicium/Graphs/UnorientedGraph.html#method-i-label_edge-21","(from, to, label)",""],["label_vertex!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-label_vertex-21","(vertex, label)",""],["left_rect_integration","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-left_rect_integration","(left_p, right_p, eps = 0.0001, &block)","<p>Left Rectangle Method and Right Rectangle Method\n"],["left_rect_integration_n","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-left_rect_integration_n","(left_p, right_p, splits, &block)","<p>Left Rectangle Auxiliary Method and Right Rectangle Auxiliary Method\n"],["middle_rectangles","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-middle_rectangles","(a, b, eps = 0.0001, &block)","<p>Middle Rectangles Method  with specified accuracy\n"],["middle_rectangles_with_a_segment","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-middle_rectangles_with_a_segment","(a, b, n, &block)","<p>Middle Rectangles Method with a segment\n"],["minimal_convex_hull_2d","Silicium::Geometry","Silicium/Geometry.html#method-i-minimal_convex_hull_2d","(points)","<p>Returns an array containing points that are included in the minimal convex hull for a given array of …\n"],["new","Silicium::Geometry::Line2dCanon","Silicium/Geometry/Line2dCanon.html#method-c-new","(p1, p2)",""],["new","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-c-new","(initializer = [])",""],["new","Silicium::Plotter::Image","Silicium/Plotter/Image.html#method-c-new","(width, height, bg_color = ChunkyPNG::Color::TRANSPARENT)","<p>Creates a new plot with chosen <code>width</code> and <code>height</code> parameters with background colored <code>bg_color</code>\n"],["oriented_area","Silicium::Geometry","Silicium/Geometry.html#method-i-oriented_area","(a, b, c)",""],["point_is_on_line?","Silicium::Geometry::Line2dCanon","Silicium/Geometry/Line2dCanon.html#method-i-point_is_on_line-3F","(p1)","<p>Checks the point lies on the line or not\n"],["point_on_the_line3d","Silicium::Geometry","Silicium/Geometry.html#method-i-point_on_the_line3d","(c)","\n<pre>Creates an array of coordinates of the point ([x, y, z] on the line\ngiven by the equation in the canonical ...</pre>\n"],["re_lu","Silicium::Optimization","Silicium/Optimization.html#method-i-re_lu","(x)","<p>reflector function\n"],["rectangle","Silicium::Plotter::Image","Silicium/Plotter/Image.html#method-i-rectangle","(x, y, width, height, color)",""],["simpson_integration","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-simpson_integration","(a, b, eps = 0.0001, &block)","<p>Simpson integration with specified accuracy\n"],["simpson_integration_with_a_segment","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-simpson_integration_with_a_segment","(a, b, n, &block)","<p>Simpson integration with a segment\n"],["three_eights_integration","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-three_eights_integration","(a, b, eps = 0.0001, &block)","<p>Computes integral from <code>a</code> to <code>b</code> of <code>block</code> with accuracy <code>eps</code>\n"],["three_eights_integration_n","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-three_eights_integration_n","(a, b, n, &block)","<p>Computes integral from <code>a</code> to <code>b</code> of <code>block</code> with <code>n</code> segmentations\n"],["trapezoid","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-trapezoid","(a, b, eps = 0.0001, &block)","<p>Trapezoid Method with specified accuracy\n"],["trapezoid_with_a_segment","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-trapezoid_with_a_segment","(a, b, n, &block)","<p>Trapezoid Method with a segment\n"],["vertex_label_number","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-vertex_label_number","()",""],["vertex_number","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-vertex_number","()",""],["README","","README_md.html","","<p><img src=\"https://travis-ci.org/mmcs-ruby/silicium.svg?branch=master\">\n<img src=\"https://api.codeclimate.com/v1/badges/b0ec4b3029f90d4273a1/maintainability\"> ...\n"]]}}